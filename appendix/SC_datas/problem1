import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# 假设数据已经按照分拣中心编号和日期排列好
# 每个文件名格式为 'center_{i}.csv'，其中 i 是分拣中心编号

# 加载数据
def load_data(num_centers=57):
    all_data = []
    for i in range(1, num_centers + 1):
        data = pd.read_csv(f'center_{i}.csv', encoding='GB2312')
        data['center_id'] = i
        all_data.append(data)
    return pd.concat(all_data, ignore_index=True)

# 数据预处理
def preprocess(data):
    # 假设数据包含日期和货量两列，日期列名为 'date'，货量列名为 'volume'
    data['date'] = pd.to_datetime(data['date'])
    data['year'] = data['date'].dt.year
    data['month'] = data['date'].dt.month
    data['day'] = data['date'].dt.day
    data['weekday'] = data['date'].dt.weekday
    return data

# 训练模型
def train_model(data):
    features = data[['center_id', 'year', 'month', 'day', 'weekday']]
    target = data['volume']
    X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)
    
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    
    # 预测和评估
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    print(f'Mean Squared Error: {mse}')
    return model

# 预测未来的货量
def predict_future(model, start_date, num_days, num_centers):
    future_dates = pd.date_range(start_date, periods=num_days)
    future_data = pd.DataFrame({
        'date': np.repeat(future_dates, num_centers),
        'center_id': np.tile(range(1, num_centers + 1), num_days)
    })
    future_data = preprocess(future_data)
    features = future_data[['center_id', 'year', 'month', 'day', 'weekday']]
    predictions = model.predict(features)
    future_data['predicted_volume'] = predictions
    return future_data

# 主函数
def main():
    data = load_data()
    data = preprocess(data)
    model = train_model(data)
    future_predictions = predict_future(model, '2024-05-01', 30, 57)
    print(future_predictions)

if __name__ == '__main__':
    main()
